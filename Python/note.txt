1、对于list，在同时需要index和value值的时候可以使用 enumerate() 方法进行遍历
	for i,j in enumerate(<listObject>)

2、os.walk 可以遍历一个路径下的所有文件，参数有 root, file
	os.listdir(path=".")
	或 for root, dirs, files in os.walk(rootDir)

3、numpy 的 argmax(<listObject>) 与 argmin(<listObject>) 返回列表中最大最小元素的元素位置 index

4、对于Python的if-else语法简写，实例如下：
	a = 1
	a = 10 if a == 1 else 100
	print(a)	# a = 10

5、浮点数 -> 整数
	round() 取四舍五入值: round(3.8) => 4，还有带第二个参数的使用方法，略
	math.floor() 往小取整
	math.ceil() 往大取整

6、对于异常捕获，万能捕获：
	try:
		...
	except Exception as e:
		print(e)
	但这种方式无法得到具体错误详情，利用 traceback：
	try:
		...
	except Exception as e:
		traceback.print_exc()	# 直接打印错误，此外还能接受 file 参数，写入错误信息到文件
		traceback.format_exc()	# 返回错误信息字符串

7、大小写转换
	小写变大写：“hELLo wOrld"
	print(a.upper())	>> "HELLO WORLD"
	大写变小写：”HellnO WORLd“
	print(a.lower())	>> "hello world"
	首字母大写：”HELLO World"
	print(a.capitalize())	>> "Hello world"
	每个单词首字母大写："hEllo wOrld"
	print(a.title())	>> "Hello World"

8、dict_keys转换为list
	直接使用 list()

9、对于list的元素删除操作：
	知道内容，不知道索引：l.remove("")
	知道索引，不知道内容：del l[index]

10、对于list的元素插入操作
	insert() 指定位置插入数据，需要两个参数
	append() 在list末尾插入数据

10、list和str互相转换
	list2str: "".join(l)
	str2list: list(s)

17、raise主动抛出异常，可以是系统内建异常，也可以是自定义异常：
	1、内建异常
		raise RuntimeError("testError")
	2、自定义异常
		class CustomError(Exception):
		    def __init__(self,ErrorInfo):
		        super().__init__(self) #初始化父类
		        self.errorinfo=ErrorInfo
		    def __str__(self):
		        return self.errorinfo

		if __name__ == '__main__':
		    try:
		        raise CustomError('客户异常')
		    except CustomError as e:
		        print(e)