1:在服务器中运行python脚本
	1：使用ssh（windows使用putty，mac使用终端）链接服务器
	2：确定python版本
		更新/安装新python（在centos中：）
			1）which python 查看python路径
			2）进入对应路径，使用 ls python* 或 ls -al python* 查看python配置
			3）安装相关包：yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make
			4）下载python源码包：wget https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tar.xz
			5）解压到指定目录：tar xf Python-3.6.4.tar.xz -C /usr/local/python3/，若报错文件不存在，则可能yum没有xz支持，使用：yum install -y xz
			6）进入解压路径，进行python安装：./configure --prefix=/usr/local/python3/python3 --with-ssl，此处的地址为python源码包解压地址（稍后的安装地址）
			7）编译文件：make && make install
			8）验证安装：/usr/local/python3/python3/bin/pip3 list
			至此，完成python安装
			1）建立软连接：ln -s /usr/local/python3/python3/bin/python3 /usr/bin/python
				#ps：如果提示 ln: creating symbolic link `/usr/bin/python': File exists
				#需要把原来的/usr/bin/python 通过以下命令备份一下
		 		mv /usr/bin/python /usr/bin/python.bak
				#需要恢复原来的python指向的话：
				cp /usr/bin/python.bak /usr/bin/python
			2）验证安装：python -V
		若遇到yum报错问题，原因是原yum默认使用的python版本，故需要修改：
			1）vi /usr/bin/yum
			2）将第一行的python环境指向正确的python2环境即可
		若需要重装python与yum环境：
			1）删除python
				1、rpm -qa|grep python|xargs rpm -ev --allmatches --nodeps ##强制删除已安装程序及其关联
				2、whereis python |xargs rm -frv ##删除所有残余文件 ##xargs，允许你对输出执行其他某些命令
				3、whereis python ##验证删除，返回无结果
			2）删除yum
				1、rpm -qa|grep yum|xargs rpm -ev --allmatches --nodeps
				2、whereis yum |xargs rm -frv
				3、whereis yum
			3）创建两个文件夹存放python与yum安装包
			4）前往http://vault.centos.org/7.4.1708/os/x86_64/Packages/，通过wget下载对应包，注意centos版本对应
				python包：
					python-...x86_64.rpm
					python-iniparse-....noarch.rpm
					python-pycurl-....x86_64.rpm
					python-devel-...x86_64.rpm
					python-libs-...x86_64.rpm
					python-urlgrabber-...narch.rpm
					rpm-python-...x86_64.rpm
				yum包：
					yum-...noarch.rpm
					yum-metadata-parser-...x86_64.rpm
					yum-plugin-fastestmirror-...noarch.rpm
			5）开始安装python：rpm -ivh python-* rmp-python-*，若出现依赖错误，使用：rpm -ivh python-* rpm-python-* --nodeps --force
			6）开始安装yum：rpm -ivh yum-*
	3：创建虚拟环境
		1）pip install virtualenv, pip install virtualenvwrapper
		2）配置环境变量
			1、vim ~/.bashrc
			2、添加：
				export WORK_HOME=$HOME/.virtualenvs
				source /usr/local/python3/python3/bin/virtualenvwrapper.sh
			3、source ~/.bashrc
		3）创建虚拟环境：mkvirtualenv env_name
		4）启动环境：workon env_name
		5）退出环境：deactivate
		6）删除环境：rmvirtualenv env_nam
	4：上传脚本
		1）使用FileZilla通过FTP进行脚本上传
	5：在后台运行python脚本
		1）nohup python ....py
		2）查看进程：ps -ef | grep python
		3）指定日志输出文件：nohup python -u ....py > ....log 2>&1 &
		4）终止进程：kill PID（PID通过2获得）

2:删除文件夹
	1.新建文件夹
		mkdir 文件名

	2.新建文本
		在home下新建一个test.sh脚本
		vi /home/test.sh

	3.删除文件或文件夹
 		rm -r /home/test
		-r是递归的删除参数表中的目录及其子目录。 目录将被清空并且删除。当删除目录包含的具有写保护的文件时用户通常是被提示的。

		rm -rf /home/test
		-f是不提示用户，删除目录下的所有文件。请注意检查路径，输成别的目录就悲剧了。

 		rm -ir /home/test
		-i是交互模式。使用这个选项，rm命令在删除任何文件前提示用户确认。

	4.移动文件或文件夹
		1、mv [options] 源文件或目录 目标文件或目录
		示例：
			1、移动hscripts文件夹/目录下的所有文件，目录和子目录到tmp目录mv hscripts tmp
		分析：
			在上述命令中，如果tmp目录已经存在，mv命令将移动hscripts文件夹/目录下的所有文件，目录和子目录到tmp目录。 如果没有tmp目录，它将重命名 hscripts目录为tmp目录。

		2、移动多个文件/更多文件到另一目录
		mv file1.txt tmp/file2.txt newdir
		这个命令移动当前目录的file1.txt文件和tmp文件夹/目录的file2.txt文件到newdir目录。

	5.复制文件或文件夹
		cp [options] 来源档(source) 目的檔(destination)
		参数：
		-a ：相当于 -pdr 的意思；
		-d ：若来源文件为连结文件的属性(link file)，则复制连结文件属性而非档案本身；
		-f ：为强制 (force) 的意思，若有重复或其它疑问时，不会询问使用者，而强制复制；
		-i ：若目的檔(destination)已经存在时，在覆盖时会先询问是否真的动作！
		-l ：进行硬式连结 (hard link) 的连结档建立，而非复制档案本身；
		-p ：连同档案的属性一起复制过去，而非使用预设属性；
		-r ：递归持续复制，用于目录的复制行为；
		-s ：复制成为符号连结文件 (symbolic link)，亦即『快捷方式』档案；
		-u ：若 destination 比 source 旧才更新 destination ！
		最后需要注意的，如果来源档有两个以上，则最后一个目的文件一定要是『目录』才行！

3:安装、更新sqlite3-3.7.18 to sqlite3-3.8.3
	wget https://www.sqlite.org/2019/sqlite-autoconf-3270200.tar.gz
	tar -zxvf sqlite-autoconf-3270200.tar.gz
	cd sqlite-autoconf-3270200
	./configure --prefix=/usr/local
	make && make install
	find /usr/ -name sqlite3

	centos7自带sqlite3，升级：
		sqlite3 --version
		mv /usr/bin/sqlite3  /usr/bin/sqlite3.bak
		ln -s /usr/local/bin/sqlite3 /usr/bin/sqlite3

	设置开机自启动
		vi ~/.bashrc
		export LD_LIBRARY_PATH="/usr/local/lib"
		source ~/.bashrc

	检查python的sqlite版本
		python
		import sqlite3
		sqlite3.sqlite_version